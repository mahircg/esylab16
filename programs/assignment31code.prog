reset:
br always >main
nop
hardfault:
ldr r11,>dummy
reti
nop
memfault:
ldr r11,>dummy
addi r11,1
reti
nop

.align
dummy: .word 0xFFFFFFFE
lcd_addr: .word 0x000F0008
cnt_top_10us:  .word 0x0000014E		//Approx. 334 cycles for 10us delay
//cnt_top_40ms: .word 0x0000014E
cnt_top_40ms: .word 0x00145856
cnt_top_37us: .word 0x000004D2
cnt_top_1_52ms: .word 0x000C5EA
enable_mask: .word 0x00000400
disable_mask: .word 0x7FFFFBFF
rs_mask: .word 0x00000200

cmd_func_set: .word 0x00000038
cmd_on_off: .word 0x0000000E
cmd_clear: .word 0x00000001
cmd_entry_set: .word 0x00000006
ddr_start_addr: .word 0x00000080
.address 0x70
string_first: .word 0x41737365
.address 0x74
string_second: .word 0x6D626C65
.address 0x78
string_third: .word 0x7220726F
.address 0x7C
string_fourth: .word 0x636B7321


main: 
	ldr r0,>lcd_addr
	call >init
	nop
	clr r10			//index variable
	clr r11			//array size=16
	addi r11,15
	clr r5
	addi r5,0x70		//base address for char array
	ldr r6,>ddr_start_addr	//DDR address initialized to 0x00
	clr r1
	add r1,r1,r6		
	call >send_enabled
	nop
  inc_addr:
	ldr r8,>cnt_top_37us
	call >wait
	nop
	ld08 r1,r5
	ldr r12, >rs_mask
	or r1,r1,r12
	call >send_enabled
	nop
	addi r5,1
	addi r6,1
	cmp neq r10,r11
        br true >inc_addr          //if i=cnt_top
        addi r10,1
  end:  br always >end
	nop	
	

	
//In case of nested calls callee saves return address

send_enabled:			//Subroutine expects command to be stored in r1
	clr r12
	add r12,r12,r13
	ldr r2,>enable_mask
	or r1,r1,r2		//Set enable bit
	st32 r0,r1
	ldr r8,>cnt_top_10us
	call >wait
	nop
	ldr r2,>disable_mask	//Data is written on falling edge of E signal
	and r1,r1,r2
	st32 r0,r1
	br always r12
	nop

send_disabled:
	clr r12
	add r12,r12,r13
	ldr r2,>disable_mask
	and r1,r1,r2
	st32 r0,r1
	ldr r8,>cnt_top_10us
	call >wait
	nop
	br always r12
	nop	
init:
	clr r9
	add r9,r9,r13	
	ldr r8,>cnt_top_40ms
	call >wait
	nop
	ldr r1,>cmd_func_set
	call >send_enabled
	nop

	ldr r8,>cnt_top_37us
	call >wait
	nop
	ldr r1,>cmd_on_off
	call >send_enabled
	nop

	ldr r8,>cnt_top_37us
	call >wait
	nop
	ldr r1,>cmd_clear
	call >send_enabled
	nop

	
	ldr r8,>cnt_top_1_52ms
	call >wait
	nop
	ldr r1,>cmd_entry_set
	call >send_enabled
	nop

	
	br always r9
	nop

wait:
	clr r7                          //inititalize inner counter
        inc_i:
        cmp neq r7,r8
        br true >inc_i          //if i=cnt_top
        addi r7,1
        ret                                     //else
        nop
